/* Author: Jacek Strotz
 * Date: 2/15/23
 * Description: This version of FrameMain provides a GUI for interacting with
 * the DFA class. First, it provides a JComboBox and JTextField for DFA file
 * and input file. Note that the purpose of JTextField is to specify path names
 * not scanned by the FrameMain constructor, or to include a web URL, preceded
 * by "http://". Although there is a standalone Check Validity button, this 
 * is automatically done when a user clicks "Read Input from File" as the 
 * validate function also handles parsing. The Check Validity button provides
 * a visual representation of the DFA in the JTextArea.
 * 
 * It is important to note that FrameMain utilizes the exterior library FlatLaf
 * to implement a dark theme. Since the library is specified by a system path,
 * it is entirely possible that when I upload this project, the reference
 * will break. To fix this, go to File -> Project Properties -> Libraries
 * and add library as classpath. This should not break, but it definitely could.
 */
package project1;

import com.formdev.flatlaf.FlatDarkLaf;
import java.io.File;
import java.net.URL;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.text.DefaultCaret;

public class FrameMain extends javax.swing.JFrame {

    DFA dfa;
    public FrameMain() {
        FlatDarkLaf.setup();
        
        initComponents();
        dfa = new DFA(outputArea);
        
        // set caret to end position to auto-scroll
        DefaultCaret caret = (DefaultCaret)outputArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE); 
        
        filterDFA();
        
        inputFileComboBox.removeAllItems();
        File[] listOfFiles = (new File("input/")).listFiles();
        
        // scan dir for files, add them to combobox
        Arrays.sort(listOfFiles);
        for (File file : listOfFiles) 
            if (file.getName().contains("input")) 
                inputFileComboBox.addItem(file.getName()); // ignore random files, only input
    }
    
    private void filterDFA() {
        dfaFileComboBox.removeAllItems();
        File[] listOfFiles = (new File("data/")).listFiles();

        // scan dir for files, add them to combobox
        Arrays.sort(listOfFiles);
        for (File file : listOfFiles) {
            In in = new In(file);
            dfa.validate(in.readAll());
            
            if (file.getName().contains("dfa")) {
                if (filterCheckBox.isSelected() && dfa.getValid() ||
                        !filterCheckBox.isSelected()) 
                    dfaFileComboBox.addItem(file.getName()); // ignore random files, only DFA
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        readDFAButton = new javax.swing.JButton();
        dfaFileComboBox = new javax.swing.JComboBox<>();
        validButton = new javax.swing.JButton();
        dfaFileTextField = new javax.swing.JTextField();
        inputFileComboBox = new javax.swing.JComboBox<>();
        inputFileTextField = new javax.swing.JTextField();
        readInputButton = new javax.swing.JButton();
        validCheckbox = new javax.swing.JCheckBox();
        filterCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(469, 306));
        setMinimumSize(new java.awt.Dimension(469, 306));
        setResizable(false);
        setSize(new java.awt.Dimension(484, 330));

        outputArea.setEditable(false);
        outputArea.setColumns(20);
        outputArea.setLineWrap(true);
        outputArea.setRows(5);
        outputArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(outputArea);

        readDFAButton.setText("Read DFA From File");
        readDFAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readDFAButtonActionPerformed(evt);
            }
        });

        dfaFileComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dfaFileComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfaFileComboBoxActionPerformed(evt);
            }
        });

        validButton.setText("Check Validity");
        validButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        validButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validButtonActionPerformed(evt);
            }
        });

        inputFileComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        inputFileComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileComboBoxActionPerformed(evt);
            }
        });

        readInputButton.setText("Read Input from File");
        readInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readInputButtonActionPerformed(evt);
            }
        });

        validCheckbox.setSelected(true);
        validCheckbox.setText("Show only valid strings");

        filterCheckBox.setSelected(true);
        filterCheckBox.setText("Filter proper DFAs");
        filterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(inputFileComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputFileTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dfaFileComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dfaFileTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(readInputButton, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(readDFAButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(validButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(validCheckbox)
                            .addComponent(filterCheckBox))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dfaFileComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dfaFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(readDFAButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputFileComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(readInputButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(validCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterCheckBox))
                    .addComponent(validButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private boolean readDFAButtonActionPerformed(java.awt.event.ActionEvent evt) {
        In in;
        // check for web URL
        if (!((String)inputFileTextField.getText())
                .matches("[h][t][t][p][s]?[:][/]{2}.*[.].*")) { 
            try {
                in = new In("data/" + dfaFileTextField.getText());
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error trying to open " 
                        + dfaFileTextField.getText() + "\n", "Alert",
                        JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (in.exists()) {
                outputArea.setText(in.readAll().trim() + "\n");
            }
        } else { 
            try {
                in = new In(new URL((String)dfaFileTextField.getText()));
                outputArea.setText(in.readAll().trim());
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Failed to read from " 
                        + dfaFileTextField.getText() + "\n", "Alert", 
                        JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }

    private void validButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validButtonActionPerformed
        readDFAButtonActionPerformed(null);
        //JOptionPane.showMessageDialog(null, dfa.validate(outputArea.getText()));
        outputArea.append(dfa.validate(outputArea.getText()));
    }//GEN-LAST:event_validButtonActionPerformed

    private void dfaFileComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dfaFileComboBoxActionPerformed
        dfaFileTextField.setText((String)dfaFileComboBox.getSelectedItem());
    }//GEN-LAST:event_dfaFileComboBoxActionPerformed

    private void inputFileComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileComboBoxActionPerformed
        inputFileTextField.setText((String)inputFileComboBox.getSelectedItem());
    }//GEN-LAST:event_inputFileComboBoxActionPerformed

    private void readInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readInputButtonActionPerformed
        if (!readDFAButtonActionPerformed(null)) return;
        String ret = dfa.validate(outputArea.getText());
        if (!dfa.getValid()) {
            JOptionPane.showMessageDialog(null, "DFA: " + ret, "Alert", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        In in;
        boolean valid = false;
        int iterator = 0;
        
        // check for web url
        if (!((String)inputFileTextField.getText())
                .matches("[h][t][t][p][s]?[:][/]{2}.*[.].*")) { 
            try {
                in = new In("input/" + inputFileTextField.getText());                        
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error trying to open " 
                        + inputFileTextField.getText() + "\n", "Alert", 
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else {
            try {
                in = new In(new URL((String)inputFileTextField.getText()));
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Failed to read from " 
                        + dfaFileTextField.getText() + "\n", "Alert", 
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        while (in.hasNextLine()) {
                    String line = in.readLine();
                    iterator++;
                    
                    switch (dfa.executeDFA(line)) {
                        case 0:
                            valid = false;
                            break;
                        case 1:
                            valid = true;
                            break;
                        case 3:
                            return;
                        default:
                            break;
                    }
                    
                    if (validCheckbox.isSelected()) {
                        if (valid) 
                            outputArea.append(line + " - accepted [line " + iterator + "]\n");
                    }
                    else
                        outputArea.append(line + " - " + (valid ? "accepted\n" : "rejected\n"));
                }
    }//GEN-LAST:event_readInputButtonActionPerformed

    private void filterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterCheckBoxActionPerformed
        filterDFA();
    }//GEN-LAST:event_filterCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
       try {
            UIManager.setLookAndFeel( new FlatDarkLaf() );
        } catch( Exception ex ) {
            System.err.println( "Failed to initialize LaF" );
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> dfaFileComboBox;
    private javax.swing.JTextField dfaFileTextField;
    private javax.swing.JCheckBox filterCheckBox;
    private javax.swing.JComboBox<String> inputFileComboBox;
    private javax.swing.JTextField inputFileTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton readDFAButton;
    private javax.swing.JButton readInputButton;
    private javax.swing.JButton validButton;
    private javax.swing.JCheckBox validCheckbox;
    // End of variables declaration//GEN-END:variables
}
